{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(authenticationService, router, formBuilder) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.formErrorMsg = ''; // Initially no error message\n    this.formInvalid = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onLoginSubmit() {\n    this.formInvalid = this.loginForm.invalid;\n    if (this.loginForm.invalid) {\n      // Show a specific error message for invalid form\n      this.formErrorMsg = 'All fields are required, please try again.';\n      return;\n    }\n    this.doLogin(); // Proceed with the login if the form is valid\n  }\n\n  doLogin() {\n    this.authenticationService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.router.navigateByUrl('list-trips');\n      },\n      error: message => {\n        // Update the error message if login fails\n        this.formErrorMsg = message;\n        this.formInvalid = true;\n      }\n    });\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 17,\n      vars: 4,\n      consts: [[1, \"row\"], [1, \"col-12\", \"col-md-8\", \"w-50\"], [1, \"mt-5\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"txtEmail\"], [\"type\", \"email\", \"formControlName\", \"email\", \"name\", \"txtEmail\", \"id\", \"txtEmail\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"txtPassword\"], [\"type\", \"password\", \"formControlName\", \"password\", \"name\", \"txtPassword\", \"id\", \"txtPassword\", \"required\", \"\", 1, \"form-control\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n          i0.ɵɵtext(3, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.onLoginSubmit();\n          });\n          i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\", 4);\n          i0.ɵɵtext(7, \"E-mail\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 8);\n          i0.ɵɵtext(14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"button\", 9);\n          i0.ɵɵtext(16, \"Sign in\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(9);\n          i0.ɵɵclassProp(\"hide-alert\", !ctx.formInvalid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.formErrorMsg, \" \");\n        }\n      },\n      dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName],\n      styles: [\".hide-alert[_ngcontent-%COMP%] {\\n    display: none;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7RUFDZiIsInNvdXJjZXNDb250ZW50IjpbIi5oaWRlLWFsZXJ0IHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","LoginComponent","constructor","authenticationService","router","formBuilder","formErrorMsg","formInvalid","ngOnInit","loginForm","group","email","required","password","onLoginSubmit","invalid","doLogin","login","value","subscribe","next","navigateByUrl","error","message","i0","ɵɵdirectiveInject","i1","AuthenticationService","i2","Router","i3","FormBuilder","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginComponent_Template_form_ngSubmit_4_listener","ɵɵelement","ɵɵadvance","ɵɵproperty","ɵɵclassProp","ɵɵtextInterpolate1"],"sources":["C:\\Users\\Kenyk\\Desktop\\SNHUCompSci\\CS-465-Portfolio\\CS-465-Portfolio\\app_admin\\src\\app\\login\\login.component.ts","C:\\Users\\Kenyk\\Desktop\\SNHUCompSci\\CS-465-Portfolio\\CS-465-Portfolio\\app_admin\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  public loginForm!: FormGroup;\n  public formErrorMsg: string = ''; // Initially no error message\n  public formInvalid: boolean = false;\n\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  public onLoginSubmit(): void {\n    this.formInvalid = this.loginForm.invalid;\n\n    if (this.loginForm.invalid) {\n      // Show a specific error message for invalid form\n      this.formErrorMsg = 'All fields are required, please try again.';\n      return;\n    }\n\n    this.doLogin(); // Proceed with the login if the form is valid\n  }\n\n  private doLogin(): void {\n    this.authenticationService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.router.navigateByUrl('list-trips');\n      },\n      error: (message) => {\n        // Update the error message if login fails\n        this.formErrorMsg = message;\n        this.formInvalid = true;\n      },\n    });\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-12 col-md-8 w-50\">\n        <h2>Login</h2>\n        <form [formGroup]=\"loginForm\" class=\"mt-5\" (ngSubmit)=\"onLoginSubmit()\">\n            <div class=\"mb-3\">\n                <label for=\"txtEmail\">E-mail</label>\n                <input type=\"email\" class=\"form-control\" formControlName=\"email\" name=\"txtEmail\" id=\"txtEmail\" required />\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"txtPassword\">Password</label>\n                <input type=\"password\" class=\"form-control\" formControlName=\"password\" name=\"txtPassword\" id=\"txtPassword\" required />\n            </div>\n            <div class=\"alert alert-danger\" role=\"alert\" [class.hide-alert]=\"!formInvalid\">\n                {{ formErrorMsg }}\n            </div>\n            <button type=\"submit\" class=\"btn btn-info\">Sign in</button>\n        </form>\n    </div>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}