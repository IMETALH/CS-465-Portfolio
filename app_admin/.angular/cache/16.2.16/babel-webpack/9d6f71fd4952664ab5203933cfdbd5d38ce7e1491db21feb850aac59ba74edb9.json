{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { BROWSER_STORAGE } from '../storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/trip-data.service\";\nexport class AuthenticationService {\n  constructor(storage, tripDataService) {\n    this.storage = storage;\n    this.tripDataService = tripDataService;\n  }\n  getToken() {\n    return this.storage.getItem('travlr-token') || '';\n  }\n  saveToken(token) {\n    this.storage.setItem('travlr-token', token);\n  }\n  login(user) {\n    return this.tripDataService.login(user).pipe(tap(authResp => this.saveToken(authResp.token)));\n  }\n  register(user) {\n    return this.tripDataService.register(user).pipe(tap(authResp => this.saveToken(authResp.token)));\n  }\n  logout() {\n    this.storage.removeItem('travlr-token');\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    if (token) {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n  getCurrentUser() {\n    if (this.isLoggedIn()) {\n      const token = this.getToken();\n      const {\n        email,\n        name\n      } = JSON.parse(atob(token.split('.')[1]));\n      return {\n        email,\n        name\n      };\n    }\n    return null;\n  }\n  static {\n    this.ɵfac = function AuthenticationService_Factory(t) {\n      return new (t || AuthenticationService)(i0.ɵɵinject(BROWSER_STORAGE), i0.ɵɵinject(i1.TripDataService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticationService,\n      factory: AuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","BROWSER_STORAGE","AuthenticationService","constructor","storage","tripDataService","getToken","getItem","saveToken","token","setItem","login","user","pipe","authResp","register","logout","removeItem","isLoggedIn","payload","JSON","parse","atob","split","exp","Date","now","getCurrentUser","email","name","i0","ɵɵinject","i1","TripDataService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Kenyk\\Desktop\\SNHUCompSci\\CS-465-Portfolio\\CS-465-Portfolio\\app_admin\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["import { map, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Inject, Injectable } from '@angular/core';\nimport { BROWSER_STORAGE } from '../storage';\nimport { TripDataService } from '../services/trip-data.service';\nimport { AuthResponse } from '../models/authresponse';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthenticationService {\n  constructor(\n    @Inject(BROWSER_STORAGE) private storage: Storage,\n    private tripDataService: TripDataService\n  ) { }\n\n  public getToken(): string {\n    return this.storage.getItem('travlr-token') || '';\n  }\n\n  public saveToken(token: string): void {\n    this.storage.setItem('travlr-token', token);\n  }\n\n  public login(user: User): Observable<any> {\n    return this.tripDataService.login(user).pipe(\n      tap((authResp: AuthResponse) => this.saveToken(authResp.token))\n    );\n  }\n  \n  public register(user: User): Observable<any> {\n    return this.tripDataService.register(user).pipe(\n      tap((authResp: AuthResponse) => this.saveToken(authResp.token))\n    );\n  }\n\n  public logout(): void {\n    this.storage.removeItem('travlr-token');\n  }\n\n  public isLoggedIn(): boolean {\n    const token: string = this.getToken();\n    if (token) {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        return payload.exp > (Date.now() / 1000);\n    } else {\n        return false;\n    }\n  }\n\n  public getCurrentUser(): User | null {\n    if (this.isLoggedIn()) {\n        const token: string = this.getToken();\n        const { email, name } = JSON.parse(atob(token.split('.')[1]));\n        return { email, name } as User;\n    }\n    return null;\n  }\n}"],"mappings":"AAAA,SAAcA,GAAG,QAAQ,gBAAgB;AAGzC,SAASC,eAAe,QAAQ,YAAY;;;AAS5C,OAAM,MAAOC,qBAAqB;EAChCC,YACmCC,OAAgB,EACzCC,eAAgC;IADP,KAAAD,OAAO,GAAPA,OAAO;IAChC,KAAAC,eAAe,GAAfA,eAAe;EACrB;EAEGC,QAAQA,CAAA;IACb,OAAO,IAAI,CAACF,OAAO,CAACG,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE;EACnD;EAEOC,SAASA,CAACC,KAAa;IAC5B,IAAI,CAACL,OAAO,CAACM,OAAO,CAAC,cAAc,EAAED,KAAK,CAAC;EAC7C;EAEOE,KAAKA,CAACC,IAAU;IACrB,OAAO,IAAI,CAACP,eAAe,CAACM,KAAK,CAACC,IAAI,CAAC,CAACC,IAAI,CAC1Cb,GAAG,CAAEc,QAAsB,IAAK,IAAI,CAACN,SAAS,CAACM,QAAQ,CAACL,KAAK,CAAC,CAAC,CAChE;EACH;EAEOM,QAAQA,CAACH,IAAU;IACxB,OAAO,IAAI,CAACP,eAAe,CAACU,QAAQ,CAACH,IAAI,CAAC,CAACC,IAAI,CAC7Cb,GAAG,CAAEc,QAAsB,IAAK,IAAI,CAACN,SAAS,CAACM,QAAQ,CAACL,KAAK,CAAC,CAAC,CAChE;EACH;EAEOO,MAAMA,CAAA;IACX,IAAI,CAACZ,OAAO,CAACa,UAAU,CAAC,cAAc,CAAC;EACzC;EAEOC,UAAUA,CAAA;IACf,MAAMT,KAAK,GAAW,IAAI,CAACH,QAAQ,EAAE;IACrC,IAAIG,KAAK,EAAE;MACP,MAAMU,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrD,OAAOJ,OAAO,CAACK,GAAG,GAAIC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAK;KAC3C,MAAM;MACH,OAAO,KAAK;;EAElB;EAEOC,cAAcA,CAAA;IACnB,IAAI,IAAI,CAACT,UAAU,EAAE,EAAE;MACnB,MAAMT,KAAK,GAAW,IAAI,CAACH,QAAQ,EAAE;MACrC,MAAM;QAAEsB,KAAK;QAAEC;MAAI,CAAE,GAAGT,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7D,OAAO;QAAEK,KAAK;QAAEC;MAAI,CAAU;;IAElC,OAAO,IAAI;EACb;;;uBA/CW3B,qBAAqB,EAAA4B,EAAA,CAAAC,QAAA,CAEtB9B,eAAe,GAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,eAAA;IAAA;EAAA;;;aAFd/B,qBAAqB;MAAAgC,OAAA,EAArBhC,qBAAqB,CAAAiC,IAAA;MAAAC,UAAA,EAHpB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}