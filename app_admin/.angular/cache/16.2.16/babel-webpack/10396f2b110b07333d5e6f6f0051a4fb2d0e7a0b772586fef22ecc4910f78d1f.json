{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(authenticationService, router, formBuilder) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.formErrorMsg = 'All fields are required, please try again';\n    this.formInvalid = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onLoginSubmit() {\n    this.formInvalid = this.loginForm.invalid;\n    if (this.loginForm.valid) {\n      this.doLogin();\n    }\n  }\n  doLogin() {\n    this.authenticationService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.router.navigateByUrl('list-trips');\n      },\n      error: message => {\n        this.formErrorMsg = message;\n        this.formInvalid = true;\n      }\n    });\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 2,\n      vars: 0,\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"login works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","LoginComponent","constructor","authenticationService","router","formBuilder","formErrorMsg","formInvalid","ngOnInit","loginForm","group","email","required","password","onLoginSubmit","invalid","valid","doLogin","login","value","subscribe","next","navigateByUrl","error","message","i0","ɵɵdirectiveInject","i1","AuthenticationService","i2","Router","i3","FormBuilder","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Kenyk\\Desktop\\SNHUCompSci\\CS-465-Portfolio\\CS-465-Portfolio\\app_admin\\src\\app\\login\\login.component.ts","C:\\Users\\Kenyk\\Desktop\\SNHUCompSci\\CS-465-Portfolio\\CS-465-Portfolio\\app_admin\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  public loginForm!: FormGroup\n  public formErrorMsg: string = 'All fields are required, please try again';\n  public formInvalid: boolean = false;\n\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  public onLoginSubmit(): void {\n    this.formInvalid = this.loginForm.invalid;\n    if (this.loginForm.valid) {\n      this.doLogin();\n    }\n  }\n\n  private doLogin(): void {\n    this.authenticationService\n      .login(this.loginForm.value)\n      .subscribe({\n        next: () => {\n          this.router.navigateByUrl('list-trips');\n        },\n        error: (message) => {\n          this.formErrorMsg = message;\n          this.formInvalid = true;\n        },\n      });\n  }\n  \n}","<p>login works!</p>\n"],"mappings":"AAGA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAQnE,OAAM,MAAOC,cAAc;EAKzBC,YACUC,qBAA4C,EAC5CC,MAAc,EACdC,WAAwB;IAFxB,KAAAF,qBAAqB,GAArBA,qBAAqB;IACrB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IANd,KAAAC,YAAY,GAAW,2CAA2C;IAClE,KAAAC,WAAW,GAAY,KAAK;EAM/B;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ;KACnC,CAAC;EACJ;EAEOE,aAAaA,CAAA;IAClB,IAAI,CAACP,WAAW,GAAG,IAAI,CAACE,SAAS,CAACM,OAAO;IACzC,IAAI,IAAI,CAACN,SAAS,CAACO,KAAK,EAAE;MACxB,IAAI,CAACC,OAAO,EAAE;;EAElB;EAEQA,OAAOA,CAAA;IACb,IAAI,CAACd,qBAAqB,CACvBe,KAAK,CAAC,IAAI,CAACT,SAAS,CAACU,KAAK,CAAC,CAC3BC,SAAS,CAAC;MACTC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAACjB,MAAM,CAACkB,aAAa,CAAC,YAAY,CAAC;MACzC,CAAC;MACDC,KAAK,EAAGC,OAAO,IAAI;QACjB,IAAI,CAAClB,YAAY,GAAGkB,OAAO;QAC3B,IAAI,CAACjB,WAAW,GAAG,IAAI;MACzB;KACD,CAAC;EACN;;;uBArCWN,cAAc,EAAAwB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,qBAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,WAAA;IAAA;EAAA;;;YAAd/B,cAAc;MAAAgC,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCX3Bb,EAAA,CAAAe,cAAA,QAAG;UAAAf,EAAA,CAAAgB,MAAA,mBAAY;UAAAhB,EAAA,CAAAiB,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}