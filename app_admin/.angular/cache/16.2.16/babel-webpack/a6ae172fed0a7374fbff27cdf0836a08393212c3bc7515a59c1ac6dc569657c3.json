{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(authenticationService, router, formBuilder) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.formErrorMsg = ''; // Initially no error message\n    this.formInvalid = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onLoginSubmit() {\n    this.formInvalid = this.loginForm.invalid;\n    if (this.loginForm.invalid) {\n      // Show a specific error message for invalid form\n      this.formErrorMsg = 'All fields are required, please try again.';\n      return;\n    }\n    this.doLogin(); // Proceed with the login if the form is valid\n  }\n\n  doLogin() {\n    this.authenticationService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.router.navigateByUrl('list-trips');\n      },\n      error: message => {\n        // Update the error message if login fails\n        this.formErrorMsg = message;\n        this.formInvalid = true;\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","authenticationService","router","formBuilder","formErrorMsg","formInvalid","ngOnInit","loginForm","group","email","required","password","onLoginSubmit","invalid","doLogin","login","value","subscribe","next","navigateByUrl","error","message","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Kenyk\\Desktop\\SNHUCompSci\\CS-465-Portfolio\\CS-465-Portfolio\\app_admin\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  public loginForm!: FormGroup;\n  public formErrorMsg: string = ''; // Initially no error message\n  public formInvalid: boolean = false;\n\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  public onLoginSubmit(): void {\n    this.formInvalid = this.loginForm.invalid;\n\n    if (this.loginForm.invalid) {\n      // Show a specific error message for invalid form\n      this.formErrorMsg = 'All fields are required, please try again.';\n      return;\n    }\n\n    this.doLogin(); // Proceed with the login if the form is valid\n  }\n\n  private doLogin(): void {\n    this.authenticationService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.router.navigateByUrl('list-trips');\n      },\n      error: (message) => {\n        // Update the error message if login fails\n        this.formErrorMsg = message;\n        this.formInvalid = true;\n      },\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YACUC,qBAA4C,EAC5CC,MAAc,EACdC,WAAwB;IAFxB,KAAAF,qBAAqB,GAArBA,qBAAqB;IACrB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IANd,KAAAC,YAAY,GAAW,EAAE,CAAC,CAAC;IAC3B,KAAAC,WAAW,GAAY,KAAK;EAMhC;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ;KACnC,CAAC;EACJ;EAEOE,aAAaA,CAAA;IAClB,IAAI,CAACP,WAAW,GAAG,IAAI,CAACE,SAAS,CAACM,OAAO;IAEzC,IAAI,IAAI,CAACN,SAAS,CAACM,OAAO,EAAE;MAC1B;MACA,IAAI,CAACT,YAAY,GAAG,4CAA4C;MAChE;;IAGF,IAAI,CAACU,OAAO,EAAE,CAAC,CAAC;EAClB;;EAEQA,OAAOA,CAAA;IACb,IAAI,CAACb,qBAAqB,CAACc,KAAK,CAAC,IAAI,CAACR,SAAS,CAACS,KAAK,CAAC,CAACC,SAAS,CAAC;MAC/DC,IAAI,EAAEA,CAAA,KAAK;QACT,IAAI,CAAChB,MAAM,CAACiB,aAAa,CAAC,YAAY,CAAC;MACzC,CAAC;MACDC,KAAK,EAAGC,OAAO,IAAI;QACjB;QACA,IAAI,CAACjB,YAAY,GAAGiB,OAAO;QAC3B,IAAI,CAAChB,WAAW,GAAG,IAAI;MACzB;KACD,CAAC;EACJ;CACD;AA1CYN,cAAc,GAAAuB,UAAA,EAN1BzB,SAAS,CAAC;EACP0B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACtC,CAAC,C,EAEW1B,cAAc,CA0C1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}